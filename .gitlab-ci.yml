image: node:16-alpine

variables:
  YARN_CACHE_FOLDER: './.yarn/cache'
  YARN_ENABLE_GLOBAL_CACHE: 'false'

stages:
  - prepare
  - test
  - build
  - publish
  - deploy

.yarn-cache: &yarn-cache
  key:
    files:
      - yarn.lock
  paths:
    - node_modules/
    - ${YARN_CACHE_FOLDER}
  policy: pull

.modules_setup:
  cache:
    <<: *yarn-cache
  before_script:
    - apk add --update --no-cache --virtual .build-deps alpine-sdk python3 libc6-compat gcompat bash
    - yarn config delete https-proxy
    - yarn config delete proxy
    - npm config set -- @procivis:registry https://${CI_SERVER_HOST}/api/v4/packages/npm/
    - npm config set -- //${CI_SERVER_HOST}/:_authToken ${CI_JOB_TOKEN}
    - npm config set -- //${CI_SERVER_HOST}/api/v4/packages/npm/:_authToken ${CI_JOB_TOKEN}
    - yarn global add node-gyp @mapbox/node-pre-gyp
    - yarn install --frozen-lockfile --network-concurrency 1

.only_tag:
  rules:
    - if: $CI_COMMIT_TAG

build_deps:
  stage: prepare
  extends: .modules_setup
  script:
    - ''
  cache:
    policy: pull-push

lint:
  stage: test
  needs: [build_deps]
  extends: .modules_setup
  script:
    - yarn lint

compile:
  stage: test
  needs: [build_deps]
  extends: .modules_setup
  script:
    - yarn typescript

test:
  stage: test
  needs: [build_deps]
  extends: .modules_setup
  script:
    - yarn test

build_storybook:
  stage: build
  needs: [build_deps]
  only: [master]
  extends: .modules_setup
  script:
    - yarn build-storybook
  artifacts:
    paths:
      - storybook-static
# TODO: jobs copied from the shared components library, to be adjusted
#
# publish_storybook:
#   stage: publish
#   image: docker:20
#   needs: [ build_storybook ]
#   only: [ master ]
#   variables:
#     IMAGE_TAG: $CI_REGISTRY_IMAGE/storybook:$CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA
#   services:
#     - docker:20-dind
#   dependencies:
#     - build_storybook
#   script:
#     - docker build -t $IMAGE_TAG -f ./docker/Dockerfile .
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - docker push $IMAGE_TAG
#
#
# deploy:
#   stage: deploy
#   only: [ master ]
#   image: dtzar/helm-kubectl:3.7.1
#   variables:
#     DEPLOY_IMAGE_TAG: $CI_COMMIT_REF_SLUG-$CI_COMMIT_SHORT_SHA
#   before_script:
#     - kubectl config set-cluster k8s --server="${K8S_API}"
#     - kubectl config set clusters.k8s.certificate-authority-data ${K8S_CA_DATA}
#     - kubectl config set-credentials gitlab-service-account --token="${K8S_TOKEN}"
#     - kubectl config set-context default --cluster=k8s --user=gitlab-service-account
#     - kubectl config use-context default
#   script:
#     # Build and deploy chart
#     - cd appcomponentschart
#     - helm repo add bitnami https://charts.bitnami.com/bitnami
#     - helm repo update
#     - helm dep build
#     - helm upgrade
#       --install react-native-components .
#       --values values/app-components.dev.eid-plus.yaml
#       --namespace components
#       --set image.tag=$DEPLOY_IMAGE_TAG
#
# publish-npm:
#   stage: deploy
#   needs: [test]
#   script:
#     - npm config set @procivis:registry https://${CI_SERVER_HOST}/api/v4/npm/
#     - npm config set //${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/npm/:_authToken ${CI_JOB_TOKEN}
#     - npm publish --verbose --access restricted --tag stable
#   extends:
#     - .modules_setup
#     - .only_tag
#
