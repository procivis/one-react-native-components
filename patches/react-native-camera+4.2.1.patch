diff --git a/node_modules/react-native-camera/package.json b/node_modules/react-native-camera/package.json
index 5e2dc63..049955c 100644
--- a/node_modules/react-native-camera/package.json
+++ b/node_modules/react-native-camera/package.json
@@ -64,7 +64,8 @@
       "git add"
     ]
   },
-  "main": "src/index.js",
+  "main": "src/index.mock.js",
+  "react-native": "src/index.js",
   "nativePackage": true,
   "pre-commit": "lint:staged",
   "repository": {
diff --git a/node_modules/react-native-camera/src/index.mock.js b/node_modules/react-native-camera/src/index.mock.js
new file mode 100644
index 0000000..ff81b43
--- /dev/null
+++ b/node_modules/react-native-camera/src/index.mock.js
@@ -0,0 +1,76 @@
+import React from 'react';
+
+export const hasTorch = async () => false;
+export class FaceDetector {
+  constructor() {}
+  static Constants = {
+    Classifications: {
+       all: "all",
+       none: "none",
+    },
+    Landmarks: {
+      all: "all",
+      none: "none",
+    },
+    Mode: {
+       fast: "fast",
+       accurate: "accurate"
+    },
+  }
+  static detectFacesAsync() {
+    return Promise.reject("web");
+  }
+}
+
+export class RNCamera extends React.Component {
+  static Constants = {
+    Orientation: {
+      auto: 'auto',
+      landscapeLeft: 'landscapeLeft',
+      landscapeRight: 'landscapeRight',
+      portrait: 'portrait',
+      portraitUpsideDown: 'portraitUpsideDown',
+    },
+    Type: {
+      back: 1,
+    },
+    AutoFocus: {
+      on: 1,
+    },
+    FlashMode: {
+      off: 1,
+    },
+    WhiteBalance: {},
+    BarCodeType: {},
+    FaceDetection: {
+      fast: 1,
+      Mode: {},
+      Landmarks: {
+        none: 0,
+      },
+      Classifications: {
+        none: 0,
+      },
+    },
+    GoogleVisionBarcodeDetection: {
+      BarcodeType: 0,
+      BarcodeMode: 0,
+    },
+  }
+
+  takePictureAsync() { return Promise.reject("web"); }
+  recordAsync() { return Promise.reject("web"); }
+  refreshAuthorizationStatus() { return Promise.reject("web"); }
+  stopRecording() {}
+  pausePreview() {}
+  resumePreview() {}
+  getAvailablePictureSizes() { return Promise.reject("web"); }
+  getCameraIdsAsync() { return Promise.reject("web"); }
+
+  getSupportedRatiosAsync() { return Promise.reject("web"); }
+  isRecording() { return Promise.resolve(false); }
+
+  render() {
+    return this.props.children;
+  }
+}
